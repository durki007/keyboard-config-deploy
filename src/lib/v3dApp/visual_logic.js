/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.8.0
 * Sun, 06 Apr 2025 10:58:02 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {
  // global variables used in the init tab
  const _initGlob = {
    percentage: 0,
    output: {
      initOptions: {
        fadeAnnotations: true,
        useBkgTransp: false,
        preserveDrawBuf: false,
        useCompAssets: false,
        useFullscreen: true,
        useCustomPreloader: false,
        preloaderStartCb: function () {},
        preloaderProgressCb: function () {},
        preloaderEndCb: function () {},
      },
    },
  };

  // global variables/constants used by puzzles' functions
  var _pGlob = {};

  _pGlob.objCache = {};
  _pGlob.fadeAnnotations = true;
  _pGlob.pickedObject = '';
  _pGlob.hoveredObject = '';
  _pGlob.mediaElements = {};
  _pGlob.loadedFile = '';
  _pGlob.states = [];
  _pGlob.percentage = 0;
  _pGlob.openedFile = '';
  _pGlob.openedFileMeta = {};
  _pGlob.xrSessionAcquired = false;
  _pGlob.xrSessionCallbacks = [];
  _pGlob.screenCoords = new v3d.Vector2();
  _pGlob.intervalTimers = {};
  _pGlob.customEvents = new v3d.EventDispatcher();
  _pGlob.eventListeners = [];
  _pGlob.htmlElements = new Set();
  _pGlob.materialsCache = new Map();

  _pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
  _pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
  _pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
  _pGlob.MIN_DRAG_SCALE = 10e-4;
  _pGlob.SET_OBJ_ROT_EPS = 1e-8;

  _pGlob.vec2Tmp = new v3d.Vector2();
  _pGlob.vec2Tmp2 = new v3d.Vector2();
  _pGlob.vec3Tmp = new v3d.Vector3();
  _pGlob.vec3Tmp2 = new v3d.Vector3();
  _pGlob.vec3Tmp3 = new v3d.Vector3();
  _pGlob.vec3Tmp4 = new v3d.Vector3();
  _pGlob.eulerTmp = new v3d.Euler();
  _pGlob.eulerTmp2 = new v3d.Euler();
  _pGlob.quatTmp = new v3d.Quaternion();
  _pGlob.quatTmp2 = new v3d.Quaternion();
  _pGlob.colorTmp = new v3d.Color();
  _pGlob.mat4Tmp = new v3d.Matrix4();
  _pGlob.planeTmp = new v3d.Plane();
  _pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

  const createPzLib = ({ v3d = null, appInstance = null }) => {
    function getElement(id, isParent = false) {
      let elem;
      if (Array.isArray(id) && id[0] === 'CONTAINER') {
        if (appInstance !== null) {
          elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
          // if we are on the initialization stage, we still can have access
          // to the container element
          const contId = _initGlob.container;
          elem = isParent
            ? parent.document.getElementById(contId)
            : document.getElementById(contId);
        }
      } else if (Array.isArray(id) && id[0] === 'WINDOW') {
        elem = isParent ? parent : window;
      } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
        elem = isParent ? parent.document : document;
      } else if (Array.isArray(id) && id[0] === 'BODY') {
        elem = isParent ? parent.document.body : document.body;
      } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
        elem = isParent
          ? parent.document.querySelector(id)
          : document.querySelector(id);
      } else {
        elem = isParent
          ? parent.document.getElementById(id)
          : document.getElementById(id);
      }
      return elem;
    }

    function getMaterialEditableColors(matName) {
      const mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
      if (!mat) {
        return [];
      }

      if (mat.isMeshNodeMaterial) {
        return Object.keys(mat.nodeRGBMap);
      } else if (mat.isMeshStandardMaterial) {
        return ['color', 'emissive'];
      } else {
        return [];
      }
    }

    function getObjectName(obj) {
      // auto-generated from a multi-material object, use parent name instead
      if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
      } else {
        return obj.name;
      }
    }

    function areListenersSame(
      target0,
      type0,
      listener0,
      optionsOrUseCapture0,
      target1,
      type1,
      listener1,
      optionsOrUseCapture1
    ) {
      const capture0 = Boolean(
        optionsOrUseCapture0 instanceof Object
          ? optionsOrUseCapture0.capture
          : optionsOrUseCapture0
      );
      const capture1 = Boolean(
        optionsOrUseCapture1 instanceof Object
          ? optionsOrUseCapture1.capture
          : optionsOrUseCapture1
      );
      return (
        target0 === target1 &&
        type0 === type1 &&
        listener0 === listener1 &&
        capture0 === capture1
      );
    }

    function bindListener(target, type, listener, optionsOrUseCapture) {
      const alreadyExists = _pGlob.eventListeners.some((elem) => {
        return areListenersSame(
          elem.target,
          elem.type,
          elem.listener,
          elem.optionsOrUseCapture,
          target,
          type,
          listener,
          optionsOrUseCapture
        );
      });

      if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({
          target,
          type,
          listener,
          optionsOrUseCapture,
        });
      }
    }

    function initObjectPicking(
      callback,
      eventType,
      mouseDownUseTouchStart = false,
      allowedMouseButtons = null
    ) {
      const elem = appInstance.renderer.domElement;
      bindListener(elem, eventType, pickListener);

      if (eventType === 'mousedown') {
        const touchEventName = mouseDownUseTouchStart
          ? 'touchstart'
          : 'touchend';
        bindListener(elem, touchEventName, pickListener);
      } else if (eventType === 'dblclick') {
        let prevTapTime = 0;

        function doubleTapCallback(event) {
          const now = new Date().getTime();
          const timesince = now - prevTapTime;

          if (timesince < 600 && timesince > 0) {
            pickListener(event);
            prevTapTime = 0;
            return;
          }

          prevTapTime = new Date().getTime();
        }

        const touchEventName = mouseDownUseTouchStart
          ? 'touchstart'
          : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
      }

      const raycaster = new v3d.Raycaster();

      function pickListener(event) {
        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera()) {
          return;
        }

        event.preventDefault();

        let xNorm = 0;
        let yNorm = 0;
        if (event instanceof MouseEvent) {
          if (
            allowedMouseButtons !== null &&
            allowedMouseButtons.indexOf(event.button) === -1
          ) {
            return;
          }
          xNorm = event.offsetX / elem.clientWidth;
          yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
          const rect = elem.getBoundingClientRect();
          xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
          yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(
          _pGlob.screenCoords,
          appInstance.getCamera(true)
        );

        const objList = [];
        appInstance.scene.traverse((obj) => objList.push(obj));

        const intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
      }
    }

    function isObjectWorthProcessing(obj) {
      return (
        obj.type !== 'AmbientLight' &&
        obj.name !== '' &&
        !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
        !obj.isAuxClippingMesh
      );
    }

    function getObjectByName(objName) {
      let objFound = null;

      const pGlobAvailable = _pGlob !== undefined;
      if (pGlobAvailable && objName in _pGlob.objCache) {
        objFound = _pGlob.objCache[objName] || null;
      }

      if (objFound && objFound.name === objName) {
        return objFound;
      }

      if (appInstance.scene) {
        appInstance.scene.traverse((obj) => {
          if (
            !objFound &&
            isObjectWorthProcessing(obj) &&
            obj.name === objName
          ) {
            objFound = obj;
            if (pGlobAvailable) {
              _pGlob.objCache[objName] = objFound;
            }
          }
        });
      }
      return objFound;
    }

    function isObjectAmongObjects(objNameToCheck, objNames) {
      if (!objNameToCheck) {
        return false;
      }

      for (let i = 0; i < objNames.length; i++) {
        if (objNameToCheck === objNames[i]) {
          return true;
        } else {
          // also check children which are auto-generated for multi-material objects
          const obj = getObjectByName(objNames[i]);
          if (obj && obj.type === 'Group') {
            for (let j = 0; j < obj.children.length; j++) {
              if (objNameToCheck === obj.children[j].name) {
                return true;
              }
            }
          }
        }
      }
      return false;
    }

    function getObjectNamesByGroupName(groupName) {
      const objNameList = [];
      appInstance.scene.traverse((obj) => {
        if (isObjectWorthProcessing(obj)) {
          const objGroupNames = obj.groupNames;
          if (!objGroupNames) {
            return;
          }

          for (let i = 0; i < objGroupNames.length; i++) {
            const objGroupName = objGroupNames[i];
            if (objGroupName === groupName) {
              objNameList.push(obj.name);
            }
          }
        }
      });
      return objNameList;
    }

    function getAllObjectNames() {
      const objNameList = [];
      appInstance.scene.traverse((obj) => {
        if (isObjectWorthProcessing(obj)) {
          objNameList.push(obj.name);
        }
      });
      return objNameList;
    }

    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
      if (typeof currObjNames === 'string') {
        namesAccum.push(currObjNames);
      } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
        const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
        for (let i = 0; i < newObjNames.length; i++) {
          namesAccum.push(newObjNames[i]);
        }
      } else if (
        Array.isArray(currObjNames) &&
        currObjNames[0] === 'ALL_OBJECTS'
      ) {
        const newObjNames = getAllObjectNames();
        for (let i = 0; i < newObjNames.length; i++) {
          namesAccum.push(newObjNames[i]);
        }
      } else if (Array.isArray(currObjNames)) {
        for (let i = 0; i < currObjNames.length; i++) {
          retrieveObjectNamesAccum(currObjNames[i], namesAccum);
        }
      }
    }

    function retrieveObjectNames(objNames) {
      const accum = [];
      retrieveObjectNamesAccum(objNames, accum);
      return accum.filter((name) => name !== '');
    }

    return {
      getElement,
      getMaterialEditableColors,
      getObjectName,
      initObjectPicking,
      isObjectAmongObjects,
      retrieveObjectNames,
    };
  };

  var PL = {};

  // backward compatibility
  if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
  }

  PL.procedures = PL.procedures || {};

  PL.execInitPuzzles = function (options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container =
      options !== undefined && 'container' in options ? options.container : '';

    return _initGlob.output;
  };

  PL.init = function (appInstance, initOptions) {
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = appInstance;

    const PzLib = createPzLib({ v3d, appInstance });

    initOptions = initOptions || {};

    if ('fadeAnnotations' in initOptions) {
      _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
    }

    var value;

    // getHTMLElemAttribute puzzle
    function getHTMLElemAttribute(attr, id, isParent) {
      var elem = PzLib.getElement(id, isParent);
      return elem ? elem[attr] : '';
    }

    // setMaterialColor puzzle
    function setMaterialColor(matName, colName, r, g, b, cssCode) {
      var colors = PzLib.getMaterialEditableColors(matName);

      if (colors.indexOf(colName) < 0) return;

      if (cssCode) {
        var color = new v3d.Color(cssCode);
        r = color.r;
        g = color.g;
        b = color.b;
      }

      var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

      for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
          var rgbIdx = mat.nodeRGBMap[colName];
          mat.nodeRGB[rgbIdx].x = r;
          mat.nodeRGB[rgbIdx].y = g;
          mat.nodeRGB[rgbIdx].z = b;
        } else {
          mat[colName].r = r;
          mat[colName].g = g;
          mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
          if (mat === appInstance.scene.worldMaterial) {
            appInstance.updateEnvironment(mat);
          }
        }
      }
    }

    // whenClicked puzzle
    function registerOnClick(
      objSelector,
      xRay,
      doubleClick,
      mouseButtons,
      cbDo,
      cbIfMissedDo
    ) {
      // for AR/VR
      _pGlob.objClickInfo = _pGlob.objClickInfo || [];

      _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo],
      });

      PzLib.initObjectPicking(
        function (intersects, event) {
          var isPicked = false;

          var maxIntersects = xRay
            ? intersects.length
            : Math.min(1, intersects.length);

          for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
              // save the object for the pickedObject block
              _pGlob.pickedObject = objName;
              isPicked = true;
              cbDo(event);
            }
          }

          if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
          }
        },
        doubleClick ? 'dblclick' : 'mousedown',
        false,
        mouseButtons
      );
    }

    registerOnClick(
      'backspace_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        console.log(`Backspace setting color to: ${value}`);
        setMaterialColor('backspace_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '/_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('/_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '-_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('-_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'apostrof_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('apostrof_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '0_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('0_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '1_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('1_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '2_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('2_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '3_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('3_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '4_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('4_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '5_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('5_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '6_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('6_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '7_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('7_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '8_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('8_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '9_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('9_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '0_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('0_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '~_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('~_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '=_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('=_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'ins_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('ins_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'home_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('home_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'pgup_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('pgup_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'backspace_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('backspace_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'esc_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('esc_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F1_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F1_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F2_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F2_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F3_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F3_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F4_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F4_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F5_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F5_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F6_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F6_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F7_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F7_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F8_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F8_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F9_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F9_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F10_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F10_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F11_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F11_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F12_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F12_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'print_screen_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('print_screen_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'scroll_lock_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('scroll_lock_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'pause_break_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('pause_break_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'tab_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('tab_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'Q_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('Q_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'W_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('W_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'E_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('E_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'R_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('R_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'T_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('T_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'Y_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('Y_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'U_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('U_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'I_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('I_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'O_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('O_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'P_button_inside_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('P_inside_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '{_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('{_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '}_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('}_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'enter_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('enter_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'backslash_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('backslash_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'del_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('del_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'end_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('end_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'pgdn_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('pdgn_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'caps_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('caps_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'A_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('A_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'S_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('S_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'D_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('D_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'F_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('F_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'G_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('G_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'H_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('H_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'J_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('J_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'K_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('K_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'L_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('L_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      ';_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor(';_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'left_shift_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('left_shift_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'Z_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('Z_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'X_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('X_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'C_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('C_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'V_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('V_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'B_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('B_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'N_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('N_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'M_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('M_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '<_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('<_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      '>_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('>_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'right_shift_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('right_shift_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'left_ctrl_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('left_ctrl_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'left_win_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('left_win_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'left_alt_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('left_alt_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'space_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('space_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'right_alt_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('right_alt_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'FN_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('FN_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'options_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('options_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'right_ctrl_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('right_ctrl_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'left_arrow_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('left_arrow_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'up_arrow_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('up_arrow_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'right_arrow_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('right_arrow_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'down_arrow_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('down_arrow_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'num_lock_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_lock_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_slash_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_slash_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_multiply_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_multiply_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_minus_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_minus_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_plus_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_plus_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_enter_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_enter_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_dot_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_dot_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num_zero_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num_zero_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num1_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num1_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num2_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num2_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num3_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num3_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num4_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num4_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num5_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num5_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num6_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num6_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num7_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num7_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num8_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num8_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
    registerOnClick(
      'num9_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('num9_color', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );

    registerOnClick(
      'body_material',
      false,
      false,
      [0, 1, 2],
      function () {
        value = getHTMLElemAttribute('value', 'color-changer', false);
        setMaterialColor('body_material', 'RGB', 0, 0, 0, value);
      },
      function () {}
    );
  }; // end of PL.init function

  PL.disposeListeners = function () {
    if (_pGlob) {
      _pGlob.eventListeners.forEach(
        ({ target, type, listener, optionsOrUseCapture }) => {
          target.removeEventListener(type, listener, optionsOrUseCapture);
        }
      );
      _pGlob.eventListeners.length = 0;
    }
  };

  PL.disposeHTMLElements = function () {
    if (_pGlob) {
      _pGlob.htmlElements.forEach((elem) => {
        elem.remove();
      });
      _pGlob.htmlElements.clear();
    }
  };

  PL.disposeMaterialsCache = function () {
    if (_pGlob) {
      for (const mat of _pGlob.materialsCache.values()) {
        mat.dispose();
      }
      _pGlob.materialsCache.clear();
    }
  };

  PL.dispose = function () {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
      delete v3d.PL;
      delete v3d.puzzles;
    }
  };

  return PL;
}

export { createPL };
